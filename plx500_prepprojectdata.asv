function [data,numgrids,counts_matrix,allunits,unit_index,unitdata]=plx500_prepprojectdata(hmiconfig,sheetname);
%%% LOAD UNIT IDENTIFYING INFORMATION FROM EXCEL AND PREPARE "FILES" MATRIX
junk=find(hmiconfig.excelfile==filesep);
excelname=hmiconfig.excelfile(junk(end)+1:end);
disp(['Scanning ',excelname,'(',sheetname,')'])
[allunits,unit_index]=plx_loadfileinfo(hmiconfig,sheetname);
numunits=size(allunits,2);
disp(['..found ',num2str(numunits),' units'])
disp('..creating new unit names...')
for un=1:numunits,
    junk=char(allunits(un).PlxFile);
    allunits(un).NewUnitName=[junk(1:end-4),'-',char(allunits(un).UnitName)];
end
disp('Done.')
disp(' ')

%%% CONVERT GRIDLOCATION TO AP COORDINATES
for uu=1:length(unit_index.GridLoc),
    unit_index.APcoords(uu,:)=plx_convertgrid2ap(unit_index.GridLoc(uu));
end

%%% COUNT GRID LOCATIONS/NEURONS
numunits=size(allunits,2); grids=unique(unit_index.GridLoc); numgrids=length(grids);
counts_matrix=plx_prepcountsmatrix(unit_index);

%%% LOAD ACTUAL INDIVIDUAL UNIT DATA
data=[]; data.cat_si=[]; data.cat_si_nobase=[]; data.face_trad=[]; data.anovas_group=[];
% Specify fields to import
unitdata.raw_si=[]; unitdata.cat_si=[];

% Create unitdata matrix
tic
for un=1:size(allunits,2),
    load([hmiconfig.rsvp500spks,allunits(un).NewUnitName,'-500responsedata.mat']); % load unit data
    %unitdata.newunitname(un)=allunits(un).NewUnitName;
    unitdata.raw_si(un)=respstructsingle.raw_si(2);
    unitdata.excite_rawsi(un)=respstructsingle.excite_rawsi;
    unitdata.inhibit_rawsi(un)=respstructsingle.inhibit_rawsi;
    unitdata.pref_excite{un}=respstructsingle.pref_excite;
    unitdata.pref_inhibit{un}=respstructsingle.pref_inhibit;
    unitdata.cat_si(un,:)=respstructsingle.cat_si(:,2)';
    unitdata.stimresponse(un,:)=respstructsingle.m_epoch1;
    unitdata.cat_avg(un,:)=respstructsingle.cat_avg(:,2)';
    unitdata.roc_analysis(un,:)=reshape(respstructsingle.roc_analysis',1,25);
    for rr=1:25, % correct ROC values
        if unitdata.roc_analysis(un,rr)<0.5, unitdata.roc_analysis(un,rr)=1-unitdata.roc_analysis(un,rr); end
    end
    unitdata.wf_type(un)=respstructsingle.wf_type;
    unitdata.wf_include(un)=respstructsingle.wf_include;
    unitdata.wf_params(un,:)=respstructsingle.wf_params;
    % INSERT NEW FIELDS AS NEEDED...
end
toc

% Organize according to Grid Location
tic
for g=1:numgrids,
    data(g).grid_coords=plx_convertgrid2ap(grids(g)); % convert grid location to A/P coordindates
    data(g).gridloc=grids(g);
    gridind=find(strcmp(unit_index.GridLoc,grids(g))==1); % find all neurons for particular grid location
    numunits_grid=length(gridind);
    data(g).cat_si=[]; data(g).pure_si=[];; data(g).cat_si_nobase=[]; data(g).face_trad=0.01; data(g).anovas_group=[]; data(g).raw_si=[]; % initialize matrices
    data(g).excite_rawsi=[]; data(g).inhibit_rawsi=[]; 
    data(g).roc_analysis=[]; data(g).cat_avg=[]; data(g).stimresponse=[]; data(g).wf_type=[]; data(g).wf_include=[]; data(g).wf_params=[];
    data(g).numsensory=0; data(g).counts=[0 0 0 0 0]; data(g).countsmat=zeros(numunits_grid,5); data(g).within_counts=zeros(1,5); % initialize matrices
    data(g).countsI=[0 0 0 0 0]; data(g).countsmatI=zeros(numunits_grid,5); data(g).within_countsI=zeros(1,5); % inhibited matrices
    data(g).countsmatI=zeros(numunits_grid,5); data(g).countsmatB=zeros(numunits_grid,5);
    data(g).sensory_mat=zeros(numunits_grid,1); data(g).selective_mat=zeros(numunits_grid,1); data(g).excite_mat=zeros(numunits_grid,1); 
    data(g).count_selective=[0 0]; data(g).count_resptype=[0 0 0 0]; data(g).stimselect=0;
    for un=1:numunits_grid,
        load([hmiconfig.rsvp500spks,allunits(gridind(un)).NewUnitName,'-500responsedata.mat']); % load unit data
        data(g).cat_si=[data(g).cat_si;respstructsingle.cat_si(1:6,2)']; % concatenate selectivity indices
        data(g).cat_si_nobase=[data(g).cat_si_nobase;respstructsingle.cat_si_nobase(1:6,2)']; % concatenate selectivity indices (no baseline)
        data(g).raw_si=[data(g).raw_si;respstructsingle.raw_si(2)];
        data(g).excite_rawsi=[data(g).excite_rawsi;respstructsingle.excite_rawsi];
        data(g).inhibit_rawsi=[data(g).inhibit_rawsi;respstructsingle.inhibit_rawsi];
        data(g).stimresponse=[data(g).stimresponse;respstructsingle.m_epoch1];
        data(g).pure_si=[data(g).pure_si;reshape(respstructsingle.pure_si',1,25)];
        data(g).cat_avg=[data(g).cat_avg;respstructsingle.cat_avg(:,2)'];
        temproc=reshape(respstructsingle.roc_analysis',1,25);
        for rr=1:25, % correct ROC values
            if temproc(rr)<0.5, temproc(rr)=1-temproc(rr); end
        end
        data(g).roc_analysis=[data(g).roc_analysis;temproc];
        data(g).face_trad=data(g).face_trad+respstructsingle.face_trad; % count "traditional" face selective neurons
        temp=respstructsingle.anova_within_group(:,:,2);
        data(g).anovas_group=[data(g).anovas_group;temp']; % concatenate within group anovas (for testing stimulus selectivity)
        data(g).wf_type=[data(g).wf_type;respstructsingle.wf_type];
        data(g).wf_include=[data(g).wf_include;respstructsingle.wf_include];
        data(g).wf_params=[data(g).wf_params;respstructsingle.wf_params];
        %% Neuron Counts
        if strcmp(respstructsingle.conf_neurtype,'Sensory')==1, % count number of sensory neurons
            data(g).sensory_mat(un,1)=1;
            data(g).numsensory=data(g).numsensory+1;
        end
        if strcmp(respstructsingle.conf_selective,'Selective')==1, % count number of category selective neurons
            data(g).count_selective(1)=data(g).count_selective(1)+1;
            data(g).selective_mat(un,1)=1;
        else data(g).count_selective(2)=data(g).count_selective(2)+1;
        end
        if strcmp(respstructsingle.conf_excite,'Excite')==1,data(g).count_resptype(1)=data(g).count_resptype(1)+1; data(g).excite_mat(un,1)=1;
        elseif strcmp(respstructsingle.conf_excite,'Both')==1, data(g).count_resptype(2)=data(g).count_resptype(2)+1; data(g).excite_mat(un,1)=2;
        elseif strcmp(respstructsingle.conf_excite,'Inhibit')==1, data(g).count_resptype(3)=data(g).count_resptype(3)+1; data(g).excite_mat(un,1)=3;
        else data(g).count_resptype(4)=data(g).count_resptype(4)+1; end
        %%% EXCITATORY PREFERENCES        
        if strcmp(respstructsingle.pref_excite,'Faces')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).counts(1)=data(g).counts(1)+1; data(g).countsmat(un,1)=data(g).countsmat(un,1)+1;
            data(g).countsmatB(un,1)=1;
            if temp(1)<0.06, data(g).within_counts(1)=data(g).within_counts(1)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_excite,'Fruit')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).counts(2)=data(g).counts(2)+1; data(g).countsmat(un,2)=data(g).countsmat(un,2)+1;
            data(g).countsmatB(un,2)=1;
            if temp(2)<0.06, data(g).within_counts(2)=data(g).within_counts(2)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_excite,'Places')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).counts(3)=data(g).counts(3)+1; data(g).countsmat(un,3)=data(g).countsmat(un,3)+1;
            data(g).countsmatB(un,3)=1;
            if temp(3)<0.06, data(g).within_counts(3)=data(g).within_counts(3)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_excite,'BodyParts')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).counts(4)=data(g).counts(4)+1; data(g).countsmat(un,4)=data(g).countsmat(un,4)+1;
            data(g).countsmatB(un,4)=1;
            if temp(4)<0.06, data(g).within_counts(4)=data(g).within_counts(4)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_excite,'Objects')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).counts(5)=data(g).counts(5)+1; data(g).countsmat(un,5)=data(g).countsmat(un,5)+1;
            data(g).countsmatB(un,5)=1;
            if temp(5)<0.06, data(g).within_counts(5)=data(g).within_counts(5)+1; end % if anova for within cat is <0.06, increment 1
        end
        %%% INHIBITORY PREFERENCES
        if strcmp(respstructsingle.pref_inhibit,'Faces')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).countsI(1)=data(g).countsI(1)+1; data(g).countsmatI(un,1)=data(g).countsmatI(un,1)+1;
            data(g).countsmatB(un,1)=1;            
            if temp(1)<0.06, data(g).within_counts(1)=data(g).within_counts(1)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_inhibit,'Fruit')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).countsI(2)=data(g).countsI(2)+1; data(g).countsmatI(un,2)=data(g).countsmatI(un,2)+1;
            data(g).countsmatB(un,2)=1;            
            if temp(2)<0.06, data(g).within_counts(2)=data(g).within_counts(2)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_inhibit,'Places')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).countsI(3)=data(g).countsI(3)+1; data(g).countsmatI(un,3)=data(g).countsmatI(un,3)+1;
            data(g).countsmatB(un,3)=1;
            if temp(3)<0.06, data(g).within_counts(3)=data(g).within_counts(3)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_inhibit,'BodyParts')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).countsI(4)=data(g).countsI(4)+1; data(g).countsmatI(un,4)=data(g).countsmatI(un,4)+1;
            data(g).countsmatB(un,4)=1;
            if temp(4)<0.06, data(g).within_counts(4)=data(g).within_counts(4)+1; end % if anova for within cat is <0.06, increment 1
        end
        if strcmp(respstructsingle.pref_inhibit,'Objects')==1 & strcmp(respstructsingle.conf_neurtype,'Sensory')==1,
            data(g).countsI(5)=data(g).countsI(5)+1; data(g).countsmatI(un,5)=data(g).countsmatI(un,5)+1;
            data(g).countsmatB(un,5)=1;
            if temp(5)<0.06, data(g).within_counts(5)=data(g).within_counts(5)+1; end % if anova for within cat is <0.06, increment 1
        end
    end
    % per grid measures
    temp1=[]; temp2=[]; temp3=[]; temp4=[]; temp5=[]; 
    data(g).numunits=numunits_grid;
    for nug=1:numunits_grid,
        %% Pure Selectivity (compare two categories only)
        temp1(nug,:)=data(g).pure_si(nug,:)*data(g).sensory_mat(nug);
        trace=[ones(1,5)*data(g).countsmat(nug,1)... % multiply by neurons that actually respond to said category
            ones(1,5)*data(g).countsmat(nug,2)...
            ones(1,5)*data(g).countsmat(nug,3)...
            ones(1,5)*data(g).countsmat(nug,4)...
            ones(1,5)*data(g).countsmat(nug,5)];
        temp2(nug,:)=data(g).pure_si(nug,:).*trace;
        %% Category Selectivity
        temp3(nug,:)=data(g).cat_si(nug,:)*data(g).sensory_mat(nug);
    end
    [data(g).pure_si_all_corr_mean data(g).pure_si_all_corr_sem]=mean_noncol(temp1);
    [data(g).pure_si_corr_mean data(g).pure_si_corr_sem]=mean_noncol(temp2);
    data(g).pure_si_corr_mean=reshape(data(g).pure_si_corr_mean,5,5)'; data(g).pure_si_corr_sem=reshape(data(g).pure_si_corr_sem,5,5)';
    [data(g).cat_si_all_corr_mean data(g).cat_si_all_corr_sem]=mean_noncol(temp3);
    %% Raw Selectivity (only excitatory and "both" neurons)
    pointer=find(data(g).sensory_mat==1 & ismember(data(g).excite_mat,[1 2])==1);
    if isempty(pointer)==1, data(g).exciteraw_si_all_corr_mean=0; data(g).exciteraw_si_all_corr_sem=0; else
        [data(g).exciteraw_si_all_corr_mean data(g).exciteraw_si_all_corr_sem]=mean_noncol(data(g).excite_rawsi(pointer));
    end; pointer=[];
    %% Raw Selectivity (only inhibited and "both" neurons)
    pointer=find(data(g).sensory_mat==1 & ismember(data(g).excite_mat,[2 3])==1);
    if isempty(pointer)==1, data(g).inhibitraw_si_all_corr_mean=0; data(g).inhibitraw_si_all_corr_sem=0; else
        [data(g).inhibitraw_si_all_corr_mean data(g).inhibitraw_si_all_corr_sem]=mean_noncol(data(g).inhibit_rawsi(pointer));
    end; pointer=[];
    % selectivity for only neurons that prefer given category
    [data(g).cat_si_corr_mean data(g).cat_si_corr_sem]=mean_noncol(data(g).cat_si(:,1:5) .* data(g).countsmat); % countsmat converts to zero all NON-PREF neurons
    %% Proportion (Excitatory Responses)
    excitecounts=sum(data(g).countsmat);
    for cat=1:5, data(g).propE(cat)=excitecounts(cat)/sum(excitecounts); end %data(g).numsensory; end
    %% Proportion (Inhibited Responses)
    inhibitcounts=sum(data(g).countsmatI);
    for cat=1:5, data(g).propI(cat)=inhibitcounts(cat)/data(g).numsensory; end
    %% Proportion (Both)
    bothcounts=sum(data(g).countsmatB);
    for cat=1:5, data(g).propB(cat)=bothcounts(cat)/data(g).numsensory; end 
    
    %% Count Both Response Types
    data(g).countsB=sum(data(g).countsmatB);
    data(g).numresponse=sum(data(g).countsB);
end
toc
clear respstructsingle temp temp1 temp2 temp3 temp4
return

